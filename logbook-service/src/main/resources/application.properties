server.port.http=8080
server.port=8443
#server.ssl.key-alias=che-selfsigned
#server.ssl.key-password=bullshit
#server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-provider=SUN
#server.ssl.key-store-type=JKS

security.require-ssl=true
#server.ssl.key-store=/etc/letsencrypt/live/logbook.snoopfish.ch/keystore.p12
server.ssl.key-store=/var/lib/postgresql/data/keystore.p12
server.ssl.key-store-password=bullshit
server.ssl.keyStoreType: PKCS12
server.ssl.keyAlias: tomcat

spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql=false
spring.database.driverClassName=org.postgresql.Driver

#spring.datasource.url=jdbc:postgresql://ec2-52-57-16-191.eu-central-1.compute.amazonaws.com:5432/trainingdb
#spring.datasource.url=jdbc:postgresql://localhost:5432/trainingdb
spring.datasource.url=jdbc:postgresql:trainingdb

spring.datasource.username=postgres
# The PostgreSQL image sets up trust authentication locally -> a password is not required when connecting from localhost (inside the same container).
# spring.datasource.password=

logging.level.root=WARN
#logging.level.org.springframework.security=INFO
#logging.level.org.springframework.web=INFO
#logging.level.org.hibernate=INFO
logging.level.ch.egli=INFO
logging.level.ch.egli.training.util.LogbookRequestLoggingFilter=DEBUG
#logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG

# spring.mvc.view.prefix=/templates/
# spring.mvc.view.suffix=.html

multipart.maxFileSize: 18000KB
multipart.maxRequestSize: 18000KB